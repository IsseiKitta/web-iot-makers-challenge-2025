openapi: 3.0.1
info:
  title: Web IoT Makers Challenge
  description: メイカーズチャレンジのアプリケーションサーバーのエンドポイント
  version: "1.0.0"
servers:
  - url: http://localhost:3000/api
    description: Local server

paths:
  /devices:
    get:
      summary: デバイス情報の取得
      security:
        - bearerAuth: []
      description: ユーザーが持つすべてのデバイスの温度、湿度、開閉の情報をユーザーIDで取得する
      parameters:
        - name: "userId"
          in: "query"
          required: true
          schema:
            type: string
            format: uuid

      responses:
        200:
          description: デバイス情報のリスト
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Device"

  /devices/register:
    post:
      summary: デバイス情報を登録
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeviceRegisterRequest"
      responses:
        201:
          description: デバイス登録成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Device"

  /devices/toggle:
    post:
      summary: 傘を開く/閉じる
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeviceToggleRequest"
      responses:
        200:
          description: 操作成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  isOpen:
                    type: boolean
                    example: true

  /auth/signup:
    post:
      summary: ユーザー登録
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthRequest"
      responses:
        201:
          description: 登録成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"

  /auth/login:
    post:
      summary: ログイン
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthRequest"
      responses:
        200:
          description: ログイン成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    AuthRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
          format: password
      required:
        - username
        - password

    AuthResponse:
      type: object
      properties:
        token:
          type: string
          description: JWTトークン
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        userId:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"

    User:
      type: object
      properties:
        userId:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
          description: Unique identifier for the user.
        username:
          type: string
          example: "user-123"
          description: Name of the user.

    Device:
      type: object
      properties:
        deviceId:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        devicename:
          type: string
          example: "umbrella A"
        temperature:
          type: number
          format: float
          example: 24.5
        humidity:
          type: number
          format: float
          example: 60.2
        latitude:
          type: number
          format: float
        longitude:
          type: number
          format: float
        isOpen:
          type: boolean
          example: false
        userId:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"

    DeviceRegisterRequest:
      type: object
      properties:
        userId:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        deviceName:
          type: string
          example: "Living room sensor"
      required:
        - userId
        - deviceName

    DeviceToggleRequest:
      type: object
      properties:
        deviceId:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        open:
          type: boolean
          example: true
      required:
        - deviceId
        - open
